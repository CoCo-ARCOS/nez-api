openapi: 3.0.3
info:
  title: Building Blocks API
  version: 1.0.0
servers:
  - url: http://localhost:20510/api/v1
    description: Local dev
  - url: http://VALUE_CHAIN_API/api/v1
    description: Internal API gateway
tags:
  - name: BuildingBlocks
    description: CRUD operations for BuildingBlocks
  - name: NFRs
    description: Non-Functional Requirements catalog
  - name: Systems
    description: Create and manage systems (a.k.a. workflows)

paths:
  /buildingblocks:
    post:
      tags: [BuildingBlocks]
      summary: Create a BuildingBlock
      description: >
        Creates a new BuildingBlock owned by the user resolved from `access_token`.
        Returns **201** on success; **404** with `{ msg: "Error" }` on failure, or `{ msg: "Token error" }` if token invalid.
      security:
        - AccessTokenQuery: []
      parameters:
        - $ref: "#/components/parameters/AccessToken"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BuildingBlockCreateRequest"
            examples:
              create:
                value:
                  name: "thumbnail-service"
                  command: "python app.py"
                  image: "registry.example.com/thumbnail:1.2.3"
                  description: "Scales images to thumbnails"
                  port: 8080
      responses:
        "201":
          description: BuildingBlock created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
              examples:
                success:
                  value: { msg: "BuildingBlock created" }
        "400":
          description: Missing access_token (handled by method gate)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
              examples:
                missingToken:
                  value: { msg: "Error" }
        "404":
          description: Token error or creation failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
              examples:
                tokenError: { value: { msg: "Token error" } }
                genericError: { value: { msg: "Error" } }
        "406":
          description: Not acceptable (unsupported method at router level)
    get:
      tags: [BuildingBlocks]
      summary: List BuildingBlocks
      description: >
        Returns the list of BuildingBlocks for the user resolved from `access_token`.
        **200** with an array when found; **404** with `[]` when none found (per current implementation).
      security:
        - AccessTokenQuery: []
      parameters:
        - $ref: "#/components/parameters/AccessToken"
      responses:
        "200":
          description: List of BuildingBlocks
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/BuildingBlock" }
              examples:
                some:
                  value:
                    - id: 12
                      owner: 3
                      name: "thumbnail-service"
                      command: "python app.py"
                      image: "registry.example.com/thumbnail:1.2.3"
                      description: "Scales images"
                      port: 8080
                      created: "2025-09-10 15:04:05"
                empty:
                  value: []
        "400":
          description: Missing access_token (handled by method gate)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
        "404":
          description: No records found (empty list)
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/BuildingBlock" }
        "406":
          description: Not acceptable (unsupported method at router level)
    put:
      tags: [BuildingBlocks]
      summary: Update a BuildingBlock
      description: >
        Updates an existing BuildingBlock by `id`. Returns **200** on success; **404** on failure.
        Requires `access_token` query due to the router check, although the handler does not use it directly.
      security:
        - AccessTokenQuery: []
      parameters:
        - $ref: "#/components/parameters/AccessToken"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BuildingBlockUpdateRequest"
            examples:
              update:
                value:
                  id: 12
                  name: "thumbnail-service"
                  command: "python main.py --port 8080"
                  image: "registry.example.com/thumbnail:1.2.4"
                  port: 8080
      responses:
        "200":
          description: BuildingBlock updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
              examples:
                ok: { value: { msg: "BuildingBlock updated" } }
        "400":
          description: Missing access_token (handled by method gate)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
        "404":
          description: Update failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
              examples:
                err: { value: { msg: "Error" } }
        "406":
          description: Not acceptable (unsupported method at router level)
    delete:
      tags: [BuildingBlocks]
      summary: Delete a BuildingBlock
      description: >
        Deletes a BuildingBlock by `id`. Returns **200** on success; **404** on failure.
        Requires `access_token` query due to the router check, although the handler does not use it directly.
        **Note:** The code expects `id` in the request body (not as a path/query parameter).
      security:
        - AccessTokenQuery: []
      parameters:
        - $ref: "#/components/parameters/AccessToken"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [id]
              properties:
                id:
                  type: integer
                  example: 12
      responses:
        "200":
          description: BuildingBlock deleted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
              examples:
                ok: { value: { msg: "BuildingBlock deleted" } }
        "400":
          description: Missing access_token (handled by method gate)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
        "404":
          description: Delete failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
              examples:
                err: { value: { msg: "Error" } }
        "406":
          description: Not acceptable (unsupported method at router level)

  /nfrs:
    get:
      tags: [NFRs]
      summary: List NFRs available for a system
      description: >
        Returns the list of NFRs for the user identified by `access_token`.
        Current implementation returns **200** with an array when data exists,
        or **404** with an (empty) array when none is found.
      security:
        - AccessTokenQuery: []
      parameters:
        - $ref: "#/components/parameters/AccessToken"
      responses:
        "200":
          description: Array of NFRs
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/NFR" }
              examples:
                some:
                  value:
                    - id: 1
                      name: "Availability"
                      description: "Service uptime â‰¥ 99.9%"
                      created: "2025-09-10 15:04:05"
                    - id: 2
                      name: "Latency"
                      description: "p95 < 200 ms"
                      created: "2025-09-10 15:04:05"
        "404":
          description: No records found
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/NFR" }
        "400":
          description: Missing access_token (if enforced upstream/router)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"

  /workflows:
    post:
      tags: [Systems]
      summary: Create a System
      description: >
        Creates a new **System** (internally called "workflow") for the authenticated user.
        Expects `stages` as a **JSON-encoded string** and arrays for `catalogs` and `requirements`.
        Returns **201** with `{ msg: "Workflow created", workflow_id: <id> }` on success; **404** on failure or token error.
      security:
        - AccessTokenQuery: []
      parameters:
        - $ref: "#/components/parameters/AccessToken"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SystemCreateRequest"
            examples:
              createSystem:
                value:
                  name: "EO Ingestion"
                  status: "draft"
                  stages: >
                    [{"id":0,"name":"ingest","block_id":101,"parent":-1},
                     {"id":1,"name":"preprocess","block_id":202,"parent":0}]
                  catalogs:
                    - token: "CATALOG_TOKEN_1"
                    - token: "CATALOG_TOKEN_2"
                  requirements:
                    - id: 1
                    - id: 2
      responses:
        "201":
          description: System created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SystemCreateResponse"
              examples:
                ok:
                  value:
                    msg: "Workflow created"
                    workflow_id: 55
        "400":
          description: Missing access_token (router-level check)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
        "404":
          description: Token error or creation failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
              examples:
                tokenError: { value: { msg: "Token error" } }
                generic: { value: { msg: "Error" } }
        "406":
          description: Not acceptable (unsupported method at router level)

    get:
      tags: [Systems]
      summary: List Systems
      description: >
        Lists Systems (internally workflows) for the authenticated user.
        Returns **200** with an array when data exists; **404** otherwise.
      security:
        - AccessTokenQuery: []
      parameters:
        - $ref: "#/components/parameters/AccessToken"
      responses:
        "200":
          description: Array of Systems
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/System" }
              examples:
                some:
                  value:
                    - id: 55
                      owner: 3
                      name: "EO Ingestion"
                      status: "draft"
                      created: "2025-09-10 15:04:05"
                empty:
                  value: []
        "404":
          description: No records found
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/System" }
        "400":
          description: Missing access_token (router-level check)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"

    put:
      tags: [Systems]
      summary: Update a System
      description: >
        Updates a System by `id`. The handler expects `id`, `name`, `status`, `stages`,
        and `rawgraph` (read from the JSON body). Returns **200** on success; **404** on failure.
      security:
        - AccessTokenQuery: []
      parameters:
        - $ref: "#/components/parameters/AccessToken"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SystemUpdateRequest"
            examples:
              updateSystem:
                value:
                  id: 55
                  name: "EO Ingestion v2"
                  status: "active"
                  stages: >
                    [{"id":0,"name":"ingest","block_id":101,"parent":-1},
                     {"id":1,"name":"preprocess","block_id":202,"parent":0}]
                  rawgraph:
                    nodes:
                      - id: "stage_ingest"
                        type: "bb"
                      - id: "stage_preprocess"
                        type: "bb"
                    edges:
                      - from: "stage_ingest"
                        to: "stage_preprocess"
      responses:
        "200":
          description: System updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
              examples:
                ok: { value: { msg: "Workflow updated" } }
        "404":
          description: Update failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
              examples:
                err: { value: { msg: "Error" } }
        "400":
          description: Missing access_token (router-level check)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"

    delete:
      tags: [Systems]
      summary: Delete a System
      description: >
        Deletes a System by `id` (provided in the **request body**, not the path).
        Returns **200** on success; **404** on failure.
      security:
        - AccessTokenQuery: []
      parameters:
        - $ref: "#/components/parameters/AccessToken"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [id]
              properties:
                id:
                  type: integer
                  example: 55
      responses:
        "200":
          description: System deleted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
              examples:
                ok: { value: { msg: "Workflow deleted" } }
        "404":
          description: Delete failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
              examples:
                err: { value: { msg: "Error" } }
        "400":
          description: Missing access_token (router-level check)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
                
  /workflows/{id}/stages:
    parameters:
      - $ref: '#/components/parameters/WorkflowId'
      - $ref: '#/components/parameters/AccessToken'
      # Optional: some deployments pass the workflow id in the query as well.
      - name: id
        in: query
        required: false
        description: Workflow id (only needed if your router exposes it via query).
        schema:
          type: integer
    get:
      tags: [Systems]
      summary: Get stages in a System
      description: >
        Returns the stages inside a System (workflow), plus their sources/sinks and the
        system's requirements. **GET only**; returns **400** if `access_token` is missing,
        **406** for non-GET, **200** with data, **404** if empty.
      security:
        - AccessTokenQuery: []
      responses:
        '200':
          description: System stages with requirements
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemStagesResponse'
              examples:
                example:
                  value:
                    requirements:
                      - id: 1
                        name: "Availability"
                        description: "Service uptime â‰¥ 99.9%"
                        created: "2025-09-10 15:04:05"
                    stages:
                      - id: 7
                        name: "ingest"
                        source: "s3://landsat/input/"
                        sink: "s3://landsat/raw/"
                        transformation: "copy"
                        created: "2025-09-10 15:04:05"
                        sources:
                          - { type: "bb", id: 101 }
                          - { type: "catalog", token: "CATALOG_TOKEN_1" }
                        sinks:
                          - { type: "bb", id: 202 }
        '404':
          description: No data found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemStagesResponse'
        '400':
          description: Missing access_token (router-level check)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '406':
          description: Not acceptable (unsupported method at router level)

components:
  parameters:
    AccessToken:
      name: access_token
      in: query
      required: true
      description: User access token used by router to allow the request to reach the handler.
      schema:
        type: string

  securitySchemes:
    AccessTokenQuery:
      type: apiKey
      in: query
      name: access_token

  schemas:
    StageWithIO:
      type: object
      properties:
        id:
          type: integer
          example: 7
        name:
          type: string
          example: ingest
        source:
          type: string
          example: s3://landsat/input/
        sink:
          type: string
          example: s3://landsat/raw/
        transformation:
          type: string
          example: copy
        created:
          type: string
          example: '2025-09-10 15:04:05'
          description: Y-m-d H:i:s
        # Aggregated by the endpoint:
        sources:
          type: array
          description: Union of BB sources and Catalog sources for this stage.
          items:
            type: object
            additionalProperties: true
        sinks:
          type: array
          description: BB sinks for this stage.
          items:
            type: object
            additionalProperties: true
    SystemStagesResponse:
      type: object
      properties:
        requirements:
          type: array
          items:
            $ref: '#/components/schemas/NFR'
        stages:
          type: array
          items:
            $ref: '#/components/schemas/StageWithIO'
    # ---------- BuildingBlocks ----------
    BuildingBlock:
      type: object
      properties:
        id: { type: integer, example: 12 }
        owner: { type: integer, example: 3 }
        name: { type: string, example: "thumbnail-service" }
        command: { type: string, example: "python app.py" }
        image: { type: string, example: "registry.example.com/thumbnail:1.2.3" }
        description: { type: string, example: "Scales images to thumbnails" }
        port: { type: integer, example: 8080 }
        created:
          type: string
          example: "2025-09-10 15:04:05"
          description: Y-m-d H:i:s

    BuildingBlockCreateRequest:
      type: object
      required: [name, command, image, description, port]
      properties:
        name: { type: string }
        command: { type: string }
        image: { type: string }
        description: { type: string }
        port: { type: integer }

    BuildingBlockUpdateRequest:
      type: object
      required: [id, name, command, image, port]
      properties:
        id: { type: integer }
        name: { type: string }
        command: { type: string }
        image: { type: string }
        port: { type: integer }

    # ---------- NFRs ----------
    NFR:
      type: object
      properties:
        id: { type: integer, example: 1 }
        name: { type: string, example: "Availability" }
        description: { type: string, example: "Service uptime â‰¥ 99.9%" }
        created:
          type: string
          description: Timestamp `Y-m-d H:i:s`.
          example: "2025-09-10 15:04:05"
      additionalProperties: true

    # ---------- Systems (Workflows) ----------
    System:
      type: object
      properties:
        id: { type: integer, example: 55 }
        owner: { type: integer, example: 3 }
        name: { type: string, example: "EO Ingestion" }
        status: { type: string, example: "draft" }
        created:
          type: string
          example: "2025-09-10 15:04:05"
          description: Y-m-d H:i:s
      additionalProperties: true

    SystemCreateRequest:
      type: object
      description: >
        Create a System. **Note:** `stages` must be provided as a JSON-encoded string,
        matching the current backend implementation.
      required: [name, status, stages, requirements]
      properties:
        name:
          type: string
          example: EO Ingestion
        status:
          type: string
          example: draft
        stages:
          type: string
          description: JSON-encoded array of stage nodes (see example).
          example: >
            [{"id":0,"name":"ingest","block_id":101,"parent":-1},
             {"id":1,"name":"preprocess","block_id":202,"parent":0}]
        catalogs:
          type: array
          description: Catalogs used to seed the root stage(s).
          items:
            type: object
            properties:
              token: { type: string, example: CATALOG_TOKEN_1 }
        requirements:
          type: array
          description: NFR identifiers to link to this System.
          items:
            type: object
            properties:
              id: { type: integer, example: 1 }

    SystemCreateResponse:
      type: object
      properties:
        msg:
          type: string
          example: Workflow created
        workflow_id:
          type: integer
          example: 55

    SystemUpdateRequest:
      type: object
      description: Update a System (workflow).
      required: [id, name, status, stages]
      properties:
        id: { type: integer, example: 55 }
        name: { type: string, example: EO Ingestion v2 }
        status: { type: string, example: active }
        stages:
          type: string
          description: JSON-encoded array of stage nodes.
          example: >
            [{"id":0,"name":"ingest","block_id":101,"parent":-1},
             {"id":1,"name":"preprocess","block_id":202,"parent":0}]
        rawgraph:
          description: Arbitrary JSON graph stored by the backend.
          oneOf:
            - type: object
            - type: array
            - type: string

    MessageResponse:
      type: object
      properties:
        msg:
          type: string
          example: BuildingBlock created
